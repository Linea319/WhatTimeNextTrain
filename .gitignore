# WhatTimeNextTrain .gitignore
# Python + Flask バックエンド & Vue.js + TypeScript フロントエンド

#################################
# Python / Flask バックエンド
#################################

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

#################################
# Node.js / Vue.js フロントエンド
#################################

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Vite build output
dist/
dist-ssr/

# Rollup build output
build/

# Storybook build outputs
.out
.storybook-out
storybook-static

# Temporary folders
tmp/
temp/

#################################
# エディタ・IDE
#################################

# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# JetBrains IDEs
.idea/
*.swp
*.swo

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

#################################
# OS生成ファイル
#################################

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

#################################
# プロジェクト固有
#################################

# ログファイル
logs/
*.log
backend.log
frontend.log
backend-error.log
frontend-error.log

# PIDファイル
pids/
*.pid

# データベースファイル（SQLiteを使用する場合）
*.db
*.sqlite
*.sqlite3

# 設定ファイル（機密情報を含む場合）
config/local.py
config/production.py
.env.local
.env.production

# テスト結果
test-results/
coverage/

# キャッシュ
.cache/
cache/

# 一時ファイル
*.tmp
*.temp
*.bak
*.backup

# アップロードファイル（もしあれば）
uploads/
media/

# 静的ファイル生成先（本番ビルド）
backend/static/
backend/assets/

# プロファイリング結果
*.prof

#################################
# セキュリティ・機密情報
#################################

# API キー
*.key
*.pem
*.p12
*.pfx

# 証明書
*.crt
*.cer
*.der

# パスワードファイル
passwords.txt
secrets.txt

# JWT秘密鍵
jwt_secret.txt

#################################
# システム・デプロイ
#################################

# systemd サービスファイル（システム固有のため）
# systemd/*.service は含める（テンプレートとして）

# Docker
.dockerignore
Dockerfile.local

# Kubernetes
k8s-local/

# Terraform
*.tfstate
*.tfstate.*
.terraform/

# 本番デプロイ用設定
deploy/production/
deploy/staging/

#################################
# その他
#################################

# プロジェクト特有の除外
# train_schedule.json は含める（サンプルデータとして重要）
# README.md は含める
# requirements.txt は含める
# package.json は含める

# バックアップファイル
*.bak
*~

# Vim
*.swp
*.swo
*.swn

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# プロファイリング・デバッグ
*.prof
*.trace
